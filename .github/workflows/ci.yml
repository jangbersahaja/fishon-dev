name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    strategy:
      matrix:
        node-version: [18.x, 20.x]

   

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run typecheck
        run: npm run typecheck

      # Generate Prisma client if schema exists (helps build succeed)
      - name: Generate Prisma client
        if: ${{ hashFiles('prisma/schema.prisma') != '' }}
        run: |
          export DATABASE_URL="${DATABASE_URL:-file:./dev.db}"
          npx prisma generate
        # ensure a DATABASE_URL is present for generator if it needs it (we set it at job-level, fallback here if missing)
      - name: Run build
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
          NEXT_TELEMETRY_DISABLED: 1

      - name: Validate Prisma schema
        if: ${{ hashFiles('prisma/schema.prisma') != '' }}
        run: npx prisma validate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL != '' && secrets.DATABASE_URL || 'postgresql://user:pass@localhost:5432/db' }}
        # DATABASE_URL is provided from env above (uses the repo secret or a dummy fallback for forked PRs)

      - name: Run tests
        run: npm test
        # If you want tests to be non-blocking for now, you can uncomment the following line:
        # continue-on-error: true
