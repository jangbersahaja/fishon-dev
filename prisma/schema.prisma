generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  passwordHash String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  blogPosts    BlogPost[]
  blogComments BlogComment[]
  // Author profile fields
  name         String?
  bio          String?        @db.Text
  avatar       String?
  website      String?
  twitter      String?
  facebook     String?
  instagram    String?
// ...existing code...
}

model BlogPost {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  excerpt         String?           @db.Text
  content         String            @db.Text
  coverImage      String?
  coverImageAlt   String?
  published       Boolean           @default(false)
  publishedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  authorId        String
  author          User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories      BlogCategory[]
  tags            BlogTag[]
  comments        BlogComment[]
  metaTitle       String?
  metaDescription String?           @db.Text
  metaKeywords    String?
  readingTime     Int?              // in minutes
  viewCount       Int               @default(0)

  @@index([slug])
  @@index([published, publishedAt])
  @@index([authorId])
}

model BlogCategory {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[]

  @@index([slug])
}

model BlogTag {
  id        String     @id @default(cuid())
  slug      String     @unique
  name      String
  createdAt DateTime   @default(now())
  posts     BlogPost[]

  @@index([slug])
}

model BlogComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
  @@index([approved])
}

model NewsletterSubscription {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  active      Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?

  @@index([email])
  @@index([active])
}

