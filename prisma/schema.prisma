generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ANGLER
  ADMIN
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String
  displayName  String?
  bio          String?
  avatarUrl    String?
  role         UserRole      @default(ANGLER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  blogPosts    BlogPost[]
  comments     BlogComment[]
  bookings     Booking[]
}

model VerificationCode {
  id        String    @id @default(cuid())
  email     String
  code      String
  type      String // "TAC", "PASSWORD_RESET", etc.
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([email, type])
  @@index([code])
  @@index([expiresAt])
}

model BlogPost {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  excerpt         String?
  content         String
  coverImage      String?
  coverImageAlt   String?
  published       Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  authorId        String
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  readingTime     Int?
  viewCount       Int       @default(0)

  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories BlogCategory[] @relation("BlogPostToCategory")
  tags       BlogTag[]      @relation("BlogPostToTag")
  comments   BlogComment[]

  @@index([slug])
  @@index([published, publishedAt])
  @@index([authorId])
}

model BlogCategory {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[] @relation("BlogPostToCategory")

  @@index([slug])
}

model BlogTag {
  id        String     @id @default(cuid())
  slug      String     @unique
  name      String
  createdAt DateTime   @default(now())
  posts     BlogPost[] @relation("BlogPostToTag")

  @@index([slug])
}

model BlogComment {
  id        String   @id @default(cuid())
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String

  author User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
  @@index([approved])
}

model NewsletterSubscription {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  unsubscribedAt DateTime?

  @@index([email])
  @@index([active])
}

// Booking system
enum BookingStatus {
  PENDING // awaiting captain approval
  APPROVED // captain approved, awaiting payment
  REJECTED // captain rejected
  EXPIRED // hold expired
  PAID // payment completed, confirmed
  CANCELLED // cancelled by angler
}

model Booking {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Captain backend charter identifier (cuid) or dummy numeric id string
  captainCharterId String
  charterName      String
  location         String

  // Selected trip snapshot
  tripName  String
  unitPrice Int // RM per day
  startTime String? // e.g., "07:00" when trips have multiple start times

  // Booking selections
  date     DateTime
  days     Int
  adults   Int
  children Int

  totalPrice        Int // computed = unitPrice * days
  status            BookingStatus @default(PENDING)
  expiresAt         DateTime // hold expires at (e.g., now + 12h)
  captainDecisionAt DateTime?

  cancellationReason String? // angler-provided reason for cancellation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([captainCharterId])
  @@index([status])
  @@index([createdAt])
}
